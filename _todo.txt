
How to compile?
adapt cmakelists in render folder


old
g++ ../src/main.cpp ../src/renderer.cpp ../src/transform.cpp ../src/Utils.cpp ../src/gamenode.cpp ../src/teogl/mesh.cpp ../src/teogl/openGLrenderer.cpp -o ../build/tinyEngine -lglut -lGLU -lGL -lGLEW -lm



TODO:
* Integrate code from lecture (in render folder)
	* make loading of meshes separate
	* create shaders separately
		* object shader
		* effect shader
	* keep the camera class as it is right now
	
	
	


* Let Mesh be owned by the renderer, but give it a base class in the engine.

* See what part of mesh transformation should perhaps even be done in the renderer.
    * Pass start and end of movements to renderer and don't calculate intermediate steps in update.
        * Must be interruptable.
        * Does it even make sense, since I also need colliders.

* Think about giving render component only a mesh ID and store meshes seperately
    * though isn't opengl basically doing that under the hood?

* Think about whether there should be an engine side representation of meshes with vertecies already
    * loading might be independent of rendering

* handle shaders well

* Let the renderer interact well with the game tree
    * Game nodes should have three states relevant to the renderer:
        * inactive: not loaded to the graphics card
        * hidden: loaded to the graphics card but not drawn
        * active: drawn

* the renderer should also manage the window

* there should be a module for input, in this case using glut

* game script objects

* collision/triggers

* sound

* UI

* skinned meshes

* animation trees

* AI
    * navmesh
    * behavior tree
    * utility

* physics


Thoughts about structure:

    Game objects
        status
        Mesh data (if null no rendering, else rendering)
        transform data (if null transform ignored)
        parent/children relationships
        game script instances (list of script objects, script objects listen to events)
        when destroyed, all children get destroyed
    Events
        trigger things in game script instances
        transport information between game script instances
        (should these be on another thread then rendering and for example physics?)
        are broadcasted down the tree, up the tree, to siblings or all nodes
            how do I actually need to pass info?
        scripts register to listen to them
            an example is input, an input event is passed and in a script there is a on horizontal axis method listening
            another example is update, scripts that need it can register and then do something with it
            also a trigger event caused by a collider passed to the parent which manages what happens on collision
            or a custom event raised by a script to inform another script that it has taken damage
    Properties (somewhat alternative to the tree structure)
        data fields
        (should transform be a property?)
        special events act on all properties that belong to a group
        this is so that the group can be represented in an array and processed fast
        example where this is needed?
    Objects are a collection of data. These data types appear only once.
    They could be represented as structs of pointers to structs of data.
    If an object doesn't have the data, the pointer is a null pointer.
    All types of data are managed by their own module.
